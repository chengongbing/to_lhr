{"ast":null,"code":"import axios from 'axios';\n// import {createRouter as $router} from \"vue-router\";\n// import router from \"@/router\";\nconst request = axios.create({\n  baseURL: '/api',\n  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  timeout: 5000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n//\n//     // config.headers['token'] = user.token;  // 设置请求头\n//     let userJson = sessionStorage.getItem(\"user\")\n//         if(!userJson) {\n//             router.push(\"/\")\n//         } else {\n//             let user = JSON.parse(userJson);\n//             config.headers['token'] = user.token;  // 设置请求头\n//         }\n//     return config\n// }, error => {\n//     return Promise.reject(error)\n// });\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 如果是返回的文件\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","request","create","baseURL","timeout","interceptors","response","use","res","data","config","responseType","JSON","parse","error","console","log","Promise","reject"],"sources":["H:/bs/SpringBoot+Vue/springboot-vue-demo/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\n// import {createRouter as $router} from \"vue-router\";\r\n// import router from \"@/router\";\r\nconst request = axios.create({\r\n    baseURL: '/api',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\r\n    timeout: 5000\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\n// request.interceptors.request.use(config => {\r\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n//\r\n//     // config.headers['token'] = user.token;  // 设置请求头\r\n//     let userJson = sessionStorage.getItem(\"user\")\r\n//         if(!userJson) {\r\n//             router.push(\"/\")\r\n//         } else {\r\n//             let user = JSON.parse(userJson);\r\n//             config.headers['token'] = user.token;  // 设置请求头\r\n//         }\r\n//     return config\r\n// }, error => {\r\n//     return Promise.reject(error)\r\n// });\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EACzBC,OAAO,EAAE,MAAM;EAAG;EAClBC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACAH,OAAO,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC7BD,QAAQ,IAAI;EACR,IAAIE,GAAG,GAAGF,QAAQ,CAACG,IAAI;EACvB;EACA,IAAIH,QAAQ,CAACI,MAAM,CAACC,YAAY,KAAK,MAAM,EAAE;IACzC,OAAOH,GAAG;EACd;EACA;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGI,IAAI,CAACC,KAAK,CAACL,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,OAAOA,GAAG;AACd,CAAC,EACDM,KAAK,IAAI;EACLC,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGF,KAAK,CAAC,EAAC;EAC3B,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CAAC,CACJ;AAGD,eAAeb,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}