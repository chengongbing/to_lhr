{"ast":null,"code":"import * as echarts from 'echarts';\nimport axios from 'axios';\nexport default {\n  name: 'ECharts',\n  data() {\n    return {\n      chartData: [],\n      dateLabels: [],\n      transactionCounts: []\n    };\n  },\n  mounted() {\n    // this.fetchData();\n  },\n  methods: {\n    // 获取后端接口的数据\n    async fetchData() {\n      try {\n        // 假设后端 API 返回格式为 { date: '2023-02-01', count: 10 }\n        const response = await axios.get('http://your-api-url/transactions/last7days');\n        const data = response.data; // 后端数据格式是[{ date: '2023-02-01', count: 10}, ...]\n\n        // 分类统计\n        this.dateLabels = data.map(item => item.date);\n        this.transactionCounts = data.map(item => item.count);\n\n        // 初始化图表\n        this.initChart();\n      } catch (error) {\n        console.error('Failed to fetch transaction data:', error);\n      }\n    },\n    // 初始化 ECharts 图表\n    initChart() {\n      const chartDom = document.getElementById('main');\n      const myChart = echarts.init(chartDom);\n      const option = {\n        xAxis: {\n          type: 'category',\n          data: this.dateLabels\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          data: this.transactionCounts,\n          type: 'line',\n          smooth: true\n        }]\n      };\n      myChart.setOption(option);\n    }\n  }\n};","map":{"version":3,"names":["echarts","axios","name","data","chartData","dateLabels","transactionCounts","mounted","methods","fetchData","response","get","map","item","date","count","initChart","error","console","chartDom","document","getElementById","myChart","init","option","xAxis","type","yAxis","series","smooth","setOption"],"sources":["F:\\to_LHR\\springboot-vue-demo\\vue\\src\\views\\SecondHandStatistics.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\">\r\n    <!-- 图表容器 -->\r\n    <div id=\"main\" style=\"width: 100%; height: 400px;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'ECharts',\r\n  data() {\r\n    return {\r\n      chartData: [],\r\n      dateLabels: [],\r\n      transactionCounts: []\r\n    };\r\n  },\r\n  mounted() {\r\n    // this.fetchData();\r\n  },\r\n  methods: {\r\n    // 获取后端接口的数据\r\n    async fetchData() {\r\n      try {\r\n        // 假设后端 API 返回格式为 { date: '2023-02-01', count: 10 }\r\n        const response = await axios.get('http://your-api-url/transactions/last7days');\r\n        const data = response.data; // 后端数据格式是[{ date: '2023-02-01', count: 10}, ...]\r\n\r\n        // 分类统计\r\n        this.dateLabels = data.map(item => item.date);\r\n        this.transactionCounts = data.map(item => item.count);\r\n\r\n        // 初始化图表\r\n        this.initChart();\r\n      } catch (error) {\r\n        console.error('Failed to fetch transaction data:', error);\r\n      }\r\n    },\r\n    // 初始化 ECharts 图表\r\n    initChart() {\r\n      const chartDom = document.getElementById('main');\r\n      const myChart = echarts.init(chartDom);\r\n      const option = {\r\n        xAxis: {\r\n          type: 'category',\r\n          data: this.dateLabels\r\n        },\r\n        yAxis: {\r\n          type: 'value'\r\n        },\r\n        series: [\r\n          {\r\n            data: this.transactionCounts,\r\n            type: 'line',\r\n            smooth: true\r\n          }\r\n        ]\r\n      };\r\n      myChart.setOption(option);\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.chart-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n  padding: 20px;\r\n}\r\n</style>\r\n"],"mappings":"AAQA,OAAO,KAAKA,OAAM,MAAO,SAAS;AAClC,OAAOC,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,EAAE;MACbC,UAAU,EAAE,EAAE;MACdC,iBAAiB,EAAE;IACrB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;EAAA,CACD;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,SAASA,CAAA,EAAG;MAChB,IAAI;QACF;QACA,MAAMC,QAAO,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAC,4CAA4C,CAAC;QAC9E,MAAMR,IAAG,GAAIO,QAAQ,CAACP,IAAI,EAAE;;QAE5B;QACA,IAAI,CAACE,UAAS,GAAIF,IAAI,CAACS,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,IAAI,CAAC;QAC7C,IAAI,CAACR,iBAAgB,GAAIH,IAAI,CAACS,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACE,KAAK,CAAC;;QAErD;QACA,IAAI,CAACC,SAAS,EAAE;MAClB,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MAC3D;IACF,CAAC;IACD;IACAD,SAASA,CAAA,EAAG;MACV,MAAMG,QAAO,GAAIC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;MAChD,MAAMC,OAAM,GAAItB,OAAO,CAACuB,IAAI,CAACJ,QAAQ,CAAC;MACtC,MAAMK,MAAK,GAAI;QACbC,KAAK,EAAE;UACLC,IAAI,EAAE,UAAU;UAChBvB,IAAI,EAAE,IAAI,CAACE;QACb,CAAC;QACDsB,KAAK,EAAE;UACLD,IAAI,EAAE;QACR,CAAC;QACDE,MAAM,EAAE,CACN;UACEzB,IAAI,EAAE,IAAI,CAACG,iBAAiB;UAC5BoB,IAAI,EAAE,MAAM;UACZG,MAAM,EAAE;QACV;MAEJ,CAAC;MACDP,OAAO,CAACQ,SAAS,CAACN,MAAM,CAAC;IAC3B;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}