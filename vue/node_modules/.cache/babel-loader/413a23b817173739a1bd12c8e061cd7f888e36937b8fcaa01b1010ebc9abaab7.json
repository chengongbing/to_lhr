{"ast":null,"code":"import request from \"@/utils/request\"; // 引入request模块\nimport * as echarts from 'echarts'; // 引入echarts\n\nexport default {\n  name: 'SecondHandStatistics',\n  created() {\n    this.loadChartData(); // 加载图表数据\n  },\n\n  methods: {\n    // 加载图表数据\n    loadChartData() {\n      request.get(\"/statistics/secondHand\").then(res => {\n        if (res.code === '0') {\n          // 假设后端返回的数据格式为 { date: '2023-02-01', count: 10 }\n          const dates = res.data.map(item => item.date);\n          const counts = res.data.map(item => item.count);\n          this.updateChart(dates, counts); // 更新图表\n        }\n      }).catch(err => {\n        console.error(\"请求失败\", err);\n      });\n    },\n    // 更新图表数据\n    updateChart(dates, counts) {\n      const chartDom = document.getElementById('main');\n      const myChart = echarts.init(chartDom);\n      const option = {\n        xAxis: {\n          type: 'category',\n          data: dates // 从后端获取的日期数据\n        },\n\n        yAxis: {\n          type: 'value'\n        },\n        series: [{\n          data: counts,\n          // 从后端获取的交易量数据\n          type: 'line',\n          smooth: true\n        }]\n      };\n      myChart.setOption(option); // 设置ECharts的配置项\n    }\n  }\n};","map":{"version":3,"names":["request","echarts","name","created","loadChartData","methods","get","then","res","code","dates","data","map","item","date","counts","count","updateChart","catch","err","console","error","chartDom","document","getElementById","myChart","init","option","xAxis","type","yAxis","series","smooth","setOption"],"sources":["F:\\to_LHR\\springboot-vue-demo\\vue\\src\\views\\SecondHandStatistics.vue"],"sourcesContent":["<template>\r\n  <div class=\"chart-container\">\r\n    <!-- 图表容器 -->\r\n    <div id=\"main\" style=\"width: 100%; height: 400px;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport request from \"@/utils/request\";  // 引入request模块\r\nimport * as echarts from 'echarts';     // 引入echarts\r\n\r\nexport default {\r\n  name: 'SecondHandStatistics',\r\n  created() {\r\n    this.loadChartData();  // 加载图表数据\r\n  },\r\n  methods: {\r\n    // 加载图表数据\r\n    loadChartData() {\r\n      request.get(\"/statistics/secondHand\").then(res => {\r\n        if (res.code === '0') {\r\n          // 假设后端返回的数据格式为 { date: '2023-02-01', count: 10 }\r\n          const dates = res.data.map(item => item.date);\r\n          const counts = res.data.map(item => item.count);\r\n          this.updateChart(dates, counts);  // 更新图表\r\n        }\r\n      }).catch(err => {\r\n        console.error(\"请求失败\", err);\r\n      });\r\n    },\r\n\r\n    // 更新图表数据\r\n    updateChart(dates, counts) {\r\n      const chartDom = document.getElementById('main');\r\n      const myChart = echarts.init(chartDom);\r\n      const option = {\r\n        xAxis: {\r\n          type: 'category',\r\n          data: dates,  // 从后端获取的日期数据\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n        },\r\n        series: [\r\n          {\r\n            data: counts,  // 从后端获取的交易量数据\r\n            type: 'line',\r\n            smooth: true,\r\n          },\r\n        ],\r\n      };\r\n      myChart.setOption(option);  // 设置ECharts的配置项\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.chart-container {\r\n  padding: 20px;\r\n}\r\n\r\n#main {\r\n  width: 1000px;\r\n  height: 400px;\r\n}\r\n</style>\r\n"],"mappings":"AAQA,OAAOA,OAAM,MAAO,iBAAiB,EAAG;AACxC,OAAO,KAAKC,OAAM,MAAO,SAAS,EAAM;;AAExC,eAAe;EACbC,IAAI,EAAE,sBAAsB;EAC5BC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,EAAE,EAAG;EACzB,CAAC;;EACDC,OAAO,EAAE;IACP;IACAD,aAAaA,CAAA,EAAG;MACdJ,OAAO,CAACM,GAAG,CAAC,wBAAwB,CAAC,CAACC,IAAI,CAACC,GAAE,IAAK;QAChD,IAAIA,GAAG,CAACC,IAAG,KAAM,GAAG,EAAE;UACpB;UACA,MAAMC,KAAI,GAAIF,GAAG,CAACG,IAAI,CAACC,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,IAAI,CAAC;UAC7C,MAAMC,MAAK,GAAIP,GAAG,CAACG,IAAI,CAACC,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACG,KAAK,CAAC;UAC/C,IAAI,CAACC,WAAW,CAACP,KAAK,EAAEK,MAAM,CAAC,EAAG;QACpC;MACF,CAAC,CAAC,CAACG,KAAK,CAACC,GAAE,IAAK;QACdC,OAAO,CAACC,KAAK,CAAC,MAAM,EAAEF,GAAG,CAAC;MAC5B,CAAC,CAAC;IACJ,CAAC;IAED;IACAF,WAAWA,CAACP,KAAK,EAAEK,MAAM,EAAE;MACzB,MAAMO,QAAO,GAAIC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;MAChD,MAAMC,OAAM,GAAIxB,OAAO,CAACyB,IAAI,CAACJ,QAAQ,CAAC;MACtC,MAAMK,MAAK,GAAI;QACbC,KAAK,EAAE;UACLC,IAAI,EAAE,UAAU;UAChBlB,IAAI,EAAED,KAAK,CAAG;QAChB,CAAC;;QACDoB,KAAK,EAAE;UACLD,IAAI,EAAE;QACR,CAAC;QACDE,MAAM,EAAE,CACN;UACEpB,IAAI,EAAEI,MAAM;UAAG;UACfc,IAAI,EAAE,MAAM;UACZG,MAAM,EAAE;QACV,CAAC;MAEL,CAAC;MACDP,OAAO,CAACQ,SAAS,CAACN,MAAM,CAAC,EAAG;IAC9B;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}