{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import { getTrainStatus} from '../api/train-record'\nimport request from \"@/utils/request\";\nexport default {\n  name: 'iceRange',\n  data() {\n    return {\n      fileList: [],\n      dialogVisible: false,\n      tifUrlList: \"\",\n      //因为一次只上传一张图片预测，只获取一个文件名\n      fileName: \"\"\n    };\n  },\n  methods: {\n    //将每次图片数组变化的时候，实时的进行监听，更改数组里面的图片数据, fileList是上传的图片\n    handleChange(file, fileList) {\n      var array = [];\n      fileList.forEach(item => {\n        array.push(item.raw);\n      });\n      //赋值给fileList\n      this.fileList = array;\n      //获取文件名，下载时候需要文件名\n      this.fileName = fileList[0].name;\n      console.log(this.fileName, \"文件名\");\n    },\n    //文件列表移除文件时的钩子\n    handleRemove(file, fileList) {\n      this.fileList = fileList;\n    },\n    //上传原始影像\n    submit() {\n      //首先判断训练状态训练状态，\n      // getTrainStatus().then(( trainFlag ) => {\n      //     //如果当前U-Net模型正在训练中\n      //     if(trainFlag.data.data.train_over == false && trainFlag.data.data.train_model == \"U-Net\") {\n      //         this.$message({\n      //                 message: \"当前U-Net模型正在训练中，请等待训练完成后再使用U-Net模型预测\",\n      //                 type: 'warning',\n      //                 showClose:true,\n      //                 //停留15秒\n      //                 duration:15000,\n      //             });\n      //     }\n      //     //如果U-Net不在训练中\n      //     else {\n\n      const formData = new FormData();\n      // 首先判断是否上传了图片，如果上传了图片，将图片存入到formData中\n      // console.log(this.fileList, \"submit方法里的this.fileList是空吗\");\n      //空数组被布尔类型判断不为空\n      // console.log(this.fileList == null, \"空数组是否为null\");\n      if (this.fileList.length != 0) {\n        //传给后台接收的文件名字,只传一张\n        formData.append(\"band5\", this.fileList[0]);\n        formData.append(\"band19\", this.fileList[1]);\n        this.$message({\n          type: 'success',\n          message: '提交成功，请等待预测结果'\n        });\n        //提交表单\n\n        request.post(\"/bx/ndsi/download\", formData).then(response => {\n          if (response.status === 200) {\n            // 请求成功，处理响应数据\n            this.$message({\n              type: 'success',\n              message: '预测成功，请下载预测标签！'\n            });\n            this.tifUrlList = response.data.data.ndsi_result_url;\n          } else {\n            // 请求成功，但服务器返回错误状态码\n            console.error('请求成功，但服务器返回错误状态码:', response.status);\n            this.$message({\n              type: 'warning',\n              message: '提交失败!'\n            });\n          }\n        }).catch(error => {\n          // 请求失败，打印错误信息\n          console.error('请求失败:', error);\n          // 这里可以根据错误类型显示不同的错误提示\n          this.$message({\n            type: 'error',\n            message: '请求失败，请检查网络或稍后重试。'\n          });\n        });\n      } else {\n        this.$message({\n          type: 'warning',\n          message: '请选择一张待预测影像上传!'\n        });\n      }\n      //     }\n      //\n      // })\n    },\n\n    //下载预测标签\n    download() {\n      console.log(this.tifUrlList, \"下载里的this.tifUrlList有什么\");\n      if (this.tifUrlList.length == 0) {\n        this.$message({\n          type: 'warning',\n          message: '请先上传待预测影像后再下载标签!'\n        });\n      } else {\n        const link = document.createElement('a');\n        // 这里是将链接地址url转成blob地址，\n        fetch(this.tifUrlList[0]).then(res => res.blob()).then(blob => {\n          link.href = URL.createObjectURL(blob);\n          //获取文件名前缀\n          var prefix = this.fileName.split(\".\")[0];\n          console.log(prefix, \"文件名\");\n          // 下载文件的名称及文件类型后缀\n          link.download = prefix + \"-unet-label.tif\";\n          document.body.appendChild(link);\n          link.click();\n          //在资源下载完成后 清除占用的缓存资源\n          window.URL.revokeObjectURL(link.href);\n          document.body.removeChild(link);\n          //url列表清空\n          this.tifUrlList = \"\";\n        }).catch(error => {\n          console.error('Error fetching data:', error);\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["request","name","data","fileList","dialogVisible","tifUrlList","fileName","methods","handleChange","file","array","forEach","item","push","raw","console","log","handleRemove","submit","formData","FormData","length","append","$message","type","message","post","then","response","status","ndsi_result_url","error","catch","download","link","document","createElement","fetch","res","blob","href","URL","createObjectURL","prefix","split","body","appendChild","click","window","revokeObjectURL","removeChild"],"sources":["H:\\bs\\SpringBoot+Vue\\springboot-vue-demo\\vue\\src\\views\\Assistance.vue"],"sourcesContent":["<template>\r\n\r\n  <el-card class=\"box-card\" style=\"width: 40%;  margin-top: 20vh;margin-left: 25vw; \" >\r\n\r\n    <div slot=\"header\" class=\"clearfix\">\r\n      <i class=\"el-icon-s-promotion\"></i>\r\n      <span style=\"margin-left: 10px; font-size: 18px;\">NDSI预测</span>\r\n    </div>\r\n\r\n    <div style=\"text-align: center; margin-bottom:12px; \">\r\n      <el-upload\r\n          class=\"upload-demo\"\r\n          action=\"#\"\r\n          drag\r\n          :limit=\"2\"\r\n          multiple\r\n          :auto-upload=\"false\"\r\n          :file-list=\"fileList\"\r\n          :on-remove=\"handleRemove\"\r\n          :on-change=\"handleChange\">\r\n        <i class=\"el-icon-upload\"></i>\r\n        <div class=\"el-upload__text\">将文件拖到此处，或<em>点击上传</em></div>\r\n      </el-upload>\r\n    </div>\r\n\r\n    <div style=\" text-align: center; height: 10%;\">\r\n      <el-button type=\"primary\"  @click=\"submit\">上传待预测影像<i class=\"el-icon-upload el-icon--right\"></i></el-button>\r\n      <el-button type=\"primary\"  @click=\"download\">下载预测标签文件<i class=\"el-icon-download el-icon--right\"></i></el-button>\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n  </el-card>\r\n</template>\r\n\r\n\r\n<script>\r\n// import { getTrainStatus} from '../api/train-record'\r\nimport request from \"@/utils/request\";\r\nexport default {\r\n  name:'iceRange',\r\n  data(){\r\n    return {\r\n\r\n\r\n      fileList: [],\r\n      dialogVisible: false,\r\n      tifUrlList:\"\",\r\n      //因为一次只上传一张图片预测，只获取一个文件名\r\n      fileName:\"\"\r\n    }\r\n  },\r\n  methods: {\r\n\r\n    //将每次图片数组变化的时候，实时的进行监听，更改数组里面的图片数据, fileList是上传的图片\r\n    handleChange(file, fileList) {\r\n      var array = [];\r\n      fileList.forEach((item) => {\r\n        array.push(item.raw);\r\n      });\r\n      //赋值给fileList\r\n      this.fileList = array;\r\n      //获取文件名，下载时候需要文件名\r\n      this.fileName = fileList[0].name\r\n      console.log(this.fileName, \"文件名\")\r\n\r\n\r\n    },\r\n    //文件列表移除文件时的钩子\r\n    handleRemove(file, fileList) {\r\n      this.fileList = fileList\r\n    },\r\n\r\n    //上传原始影像\r\n    submit() {\r\n      //首先判断训练状态训练状态，\r\n      // getTrainStatus().then(( trainFlag ) => {\r\n      //     //如果当前U-Net模型正在训练中\r\n      //     if(trainFlag.data.data.train_over == false && trainFlag.data.data.train_model == \"U-Net\") {\r\n      //         this.$message({\r\n      //                 message: \"当前U-Net模型正在训练中，请等待训练完成后再使用U-Net模型预测\",\r\n      //                 type: 'warning',\r\n      //                 showClose:true,\r\n      //                 //停留15秒\r\n      //                 duration:15000,\r\n      //             });\r\n      //     }\r\n      //     //如果U-Net不在训练中\r\n      //     else {\r\n\r\n\r\n\r\n\r\n      const formData = new FormData();\r\n      // 首先判断是否上传了图片，如果上传了图片，将图片存入到formData中\r\n      // console.log(this.fileList, \"submit方法里的this.fileList是空吗\");\r\n      //空数组被布尔类型判断不为空\r\n      // console.log(this.fileList == null, \"空数组是否为null\");\r\n      if (this.fileList.length != 0) {\r\n        //传给后台接收的文件名字,只传一张\r\n        formData.append(\"band5\" ,this.fileList[0])\r\n        formData.append(\"band19\", this.fileList[1])\r\n        this.$message({type: 'success', message: '提交成功，请等待预测结果'});\r\n        //提交表单\r\n\r\n         request.post(\"/bx/ndsi/download\",formData)\r\n            .then((response) => {\r\n              if (response.status === 200) {\r\n                // 请求成功，处理响应数据\r\n                this.$message({ type: 'success', message: '预测成功，请下载预测标签！' });\r\n                this.tifUrlList = response.data.data.ndsi_result_url;\r\n              } else {\r\n                // 请求成功，但服务器返回错误状态码\r\n                console.error('请求成功，但服务器返回错误状态码:', response.status);\r\n                this.$message({ type: 'warning', message: '提交失败!' });\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              // 请求失败，打印错误信息\r\n              console.error('请求失败:', error);\r\n              // 这里可以根据错误类型显示不同的错误提示\r\n              this.$message({ type: 'error', message: '请求失败，请检查网络或稍后重试。' });\r\n            });\r\n      }\r\n      else {\r\n        this.$message({type: 'warning', message: '请选择一张待预测影像上传!'});\r\n      }\r\n      //     }\r\n      //\r\n      // })\r\n    },\r\n\r\n\r\n    //下载预测标签\r\n    download() {\r\n      console.log(this.tifUrlList, \"下载里的this.tifUrlList有什么\" )\r\n      if(this.tifUrlList.length == 0) {\r\n        this.$message({type: 'warning', message: '请先上传待预测影像后再下载标签!'});\r\n      }\r\n      else {\r\n        const link = document.createElement('a')\r\n        // 这里是将链接地址url转成blob地址，\r\n        fetch(this.tifUrlList[0]).then(res => res.blob()).then(blob => {\r\n          link.href = URL.createObjectURL(blob)\r\n          //获取文件名前缀\r\n          var prefix = this.fileName.split(\".\")[0]\r\n          console.log(prefix, \"文件名\")\r\n          // 下载文件的名称及文件类型后缀\r\n          link.download = prefix + \"-unet-label.tif\"\r\n          document.body.appendChild(link)\r\n          link.click()\r\n          //在资源下载完成后 清除占用的缓存资源\r\n          window.URL.revokeObjectURL(link.href)\r\n          document.body.removeChild(link)\r\n          //url列表清空\r\n          this.tifUrlList = \"\"\r\n        })\r\n            .catch(error => {\r\n              console.error('Error fetching data:', error)\r\n            })\r\n      }\r\n\r\n\r\n    }\r\n\r\n\r\n  }\r\n\r\n}\r\n\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.upload-demo {\r\n  justify-content: center;\r\n  //该图层在纵轴上垂直居中\r\n  align-items: center;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}